{{- if .Values.Master.StatefulSet.Enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "jenkins.fullname" . }}
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Release.Name }}-{{ .Values.Master.Name }}"
  {{- if .Values.Master.StatefulSet.StatefulSetAnnotations }}
  annotations:
{{ toYaml .Values.Master.StatefulSet.StatefulSetAnnotations | indent 4 }}
  {{- end }}
spec:
  serviceName: {{ template "jenkins.fullname" . }}
  replicas: {{ default 1 .Values.Master.StatefulSet.Replicas }}
  {{- if .Values.Master.StatefulSet.UpdateStrategy }}
  updateStrategy:
    type: {{ .Values.Master.StatefulSet.UpdateStrategy }}
  {{- end }}
  selector:
    matchLabels:
      component: "{{ .Release.Name }}-{{ .Values.Master.Component }}"
  template:
    metadata:
      labels:
        app: {{ template "jenkins.fullname" . }}
        heritage: {{ .Release.Service | quote }}
        release: {{ .Release.Name | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        component: "{{ .Release.Name }}-{{ .Values.Master.Name }}"
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
        {{- if .Values.Master.StatefulSet.podAnnotations }}
{{ toYaml .Values.Master.StatefulSet.podAnnotations | indent 8 }}
        {{- end }}
    spec:
  {{- if .Values.Master.StatefulSet.SchedulerName }}
      schedulerName: {{ .Values.Master.StatefulSet.SchedulerName }}
  {{- end }}
  {{- if .Values.Master.NodeSelector }}
      nodeSelector:
{{ toYaml .Values.Master.NodeSelector | indent 8 }}
  {{- end }}
  {{- if .Values.Master.Tolerations }}
      tolerations:
{{ toYaml .Values.Master.Tolerations | indent 8 }}
  {{- end }}
  {{- if .Values.Master.Affinity }}
      affinity:
{{ toYaml .Values.Master.Affinity | indent 8 }}
  {{- end }}
  {{- if .Values.Master.UsePodSecurityContext }}
      securityContext:
        runAsUser: {{ default 0 .Values.Master.RunAsUser }}
        {{- if and (.Values.Master.RunAsUser) (.Values.Master.FsGroup) }}
        {{- if not (eq .Values.Master.RunAsUser 0.0) }}
        fsGroup: {{ .Values.Master.FsGroup }}
        runAsNonRoot: true
        {{- end }}
        {{- end }}
  {{- end }}
      serviceAccountName: {{ if .Values.rbac.install }}{{ template "jenkins.fullname" . }}{{ else }}"{{ .Values.rbac.serviceAccountName }}"{{ end }}
{{- if .Values.Master.HostNetworking }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
{{- end }}
      initContainers:
        - name: "copy-default-config"
          image: "{{ .Values.Master.Image }}:{{ .Values.Master.ImageTag }}"
          imagePullPolicy: "{{ .Values.Master.ImagePullPolicy }}"
          command: [ "sh", "/var/jenkins_config/apply_config.sh" ]
          env:
          {{- if .Values.Master.UseSecurity }}
          - name: ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "jenkins.fullname" . }}
                key: jenkins-admin-password
          - name: ADMIN_USER
            valueFrom:
              secretKeyRef:
                name: {{ template "jenkins.fullname" . }}
                key: jenkins-admin-user
          {{- end }}
          {{- if .Values.Master.InitContainerEnv }}
{{ toYaml .Values.Master.InitContainerEnv | indent 12 }}
          {{- end }}
          resources:
{{ toYaml .Values.Master.resources | indent 12 }}
          volumeMounts:
            -
              mountPath: /var/jenkins_home
              name: jenkins-home
            -
              mountPath: /var/jenkins_config
              name: jenkins-config
            {{- if .Values.Master.CredentialsXmlSecret }}
            -
              mountPath: /var/jenkins_credentials
              name: jenkins-credentials
              readOnly: true
            {{- end }}
            {{- if .Values.Master.SecretsFilesSecret }}
            -
              mountPath: /var/jenkins_secrets
              name: jenkins-secrets
              readOnly: true
            {{- end }}
            {{- if .Values.Master.Jobs }}
            -
              mountPath: /var/jenkins_jobs
              name: jenkins-jobs
              readOnly: true
            {{- end }}
            -
              mountPath: /usr/share/jenkins/ref/secrets/
              name: secrets-dir
      containers:
        - name: {{ template "jenkins.fullname" . }}
          image: "{{ .Values.Master.Image }}:{{ .Values.Master.ImageTag }}"
          imagePullPolicy: "{{ .Values.Master.ImagePullPolicy }}"
          {{- if .Values.Master.UseSecurity }}
          args: [ "--argumentsRealm.passwd.$(ADMIN_USER)=$(ADMIN_PASSWORD)",  "--argumentsRealm.roles.$(ADMIN_USER)=admin" ]
          {{- end }}
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "{{ default "" .Values.Master.JavaOpts | replace "\n" " "}}"
            - name: JENKINS_OPTS
              value: "{{ if .Values.Master.JenkinsUriPrefix }}--prefix={{ .Values.Master.JenkinsUriPrefix }} {{ end }}{{ default "" .Values.Master.JenkinsOpts}}"
            {{- if .Values.Master.UseSecurity }}
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "jenkins.fullname" . }}
                  key: jenkins-admin-password
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "jenkins.fullname" . }}
                  key: jenkins-admin-user
            {{- end }}
            {{- if .Values.Master.ContainerEnv }}
{{ toYaml .Values.Master.ContainerEnv | indent 12 }}
            {{- end }}
          ports:
            - containerPort: 8080
              name: http
            - containerPort: {{ .Values.Master.SlaveListenerPort }}
              name: slavelistener
            {{- if .Values.Master.JMXPort }}
            - containerPort: {{ .Values.Master.JMXPort }}
              name: jmx
            {{- end }}
  {{- if .Values.Master.HealthProbes }}
          livenessProbe:
            httpGet:
              path: "{{ default "" .Values.Master.JenkinsUriPrefix }}/login"
              port: http
            initialDelaySeconds: {{ .Values.Master.HealthProbesLivenessTimeout }}
            timeoutSeconds: 5
            failureThreshold: {{ .Values.Master.HealthProbeLivenessFailureThreshold }}
          readinessProbe:
            httpGet:
              path: "{{ default "" .Values.Master.JenkinsUriPrefix }}/login"
              port: http
            initialDelaySeconds: {{ .Values.Master.HealthProbesReadinessTimeout }}
  {{- end }}
          resources:
  {{ if or .Values.Master.Cpu .Values.Master.Memory }}
            requests:
              cpu: "{{ .Values.Master.Cpu }}"
              memory: "{{ .Values.Master.Memory }}"
  {{ else }}
{{ toYaml .Values.Master.resources | indent 12 }}
  {{ end }}
          volumeMounts:
  {{- if .Values.Persistence.mounts }}
{{ toYaml .Values.Persistence.mounts | indent 12 }}
  {{- end }}
            -
              mountPath: /var/jenkins_home
              {{- if .Values.Persistence.ExistingClaim }}
              name: {{ .Values.Persistence.ExistingClaim }}
              {{- else }}
              name: jenkins-home
              {{- end }}
              readOnly: false
            -
              mountPath: /var/jenkins_config
              name: jenkins-config
              readOnly: true
              {{- if .Values.Master.CredentialsXmlSecret }}
            -
              mountPath: /var/jenkins_credentials
              name: jenkins-credentials
              readOnly: true
              {{- end }}
              {{- if .Values.Master.SecretsFilesSecret }}
            -
              mountPath: /var/jenkins_secrets
              name: jenkins-secrets
              readOnly: true
              {{- end }}
              {{- if .Values.Master.Jobs }}
            -
              mountPath: /var/jenkins_jobs
              name: jenkins-jobs
              readOnly: true
              {{- end }}
            -
              mountPath: /usr/share/jenkins/ref/secrets/
              name: secrets-dir
              readOnly: false
      volumes:
  {{- if .Values.Persistence.volumes }}
{{ toYaml .Values.Persistence.volumes | indent 6 }}
  {{- end }}
      - name: jenkins-config
        configMap:
          name: {{ template "jenkins.fullname" . }}
  {{- if .Values.Master.CredentialsXmlSecret }}
      - name: jenkins-credentials
        secret:
          secretName: {{ .Values.Master.CredentialsXmlSecret }}
  {{- end }}
  {{- if .Values.Master.SecretsFilesSecret }}
      - name: jenkins-secrets
        secret:
          secretName: {{ .Values.Master.SecretsFilesSecret }}
  {{- end }}
  {{- if .Values.Master.Jobs }}
      - name: jenkins-jobs
        configMap:
          name: {{ template "jenkins.fullname" . }}-jobs
  {{- end }}
      - name: secrets-dir
        emptyDir: {}
  {{- if .Values.Persistence.Enabled }}
      - name: jenkins-home
        persistentVolumeClaim:
          claimName: {{ .Values.Persistence.ExistingClaim | default (include "jenkins.fullname" .) }}
  {{- end -}}
  {{- if .Values.Master.ImagePullSecret }}
      imagePullSecrets:
      - name: {{ .Values.Master.ImagePullSecret }}
  {{- end -}}
  {{- if and (not .Values.Persistence.Enabled) .Values.Persistence.ExistingClaim }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Values.Persistence.ExistingClaim }}
      # annotations:
      #   volume.beta.kubernetes.io/storage-class: anything
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
  {{- end -}}
{{- end -}}
